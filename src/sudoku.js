// Generated by CoffeeScript 1.7.1
(function() {
  var createBox, createTable, deducePossibilities, refreshAnswers, removeFromArray,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  removeFromArray = function(a, e) {
    var i, _results;
    _results = [];
    while (a.indexOf(e) > -1) {
      i = a.indexOf(e);
      _results.push(a.splice(i, 1));
    }
    return _results;
  };

  createTable = function(table, contents) {
    var c, cell, r, row, _i, _results;
    _results = [];
    for (r = _i = 0; _i < 9; r = ++_i) {
      row = document.createElement("tr");
      table.appendChild(row);
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (c = _j = 0; _j < 9; c = ++_j) {
          cell = document.createElement("td");
          cell.style.border = "1px solid black";
          if (c % 3 === 0) {
            cell.style.borderLeftWidth = "3px";
          }
          if (c % 3 === 2) {
            cell.style.borderRightWidth = "3px";
          }
          if (r % 3 === 0) {
            cell.style.borderTopWidth = "3px";
          }
          if (r % 3 === 2) {
            cell.style.borderBottomWidth = "3px";
          }
          cell.style.padding = "0px";
          cell.style.width = "20px";
          cell.style.height = "20px";
          cell.style.textAlign = "center";
          if (contents != null) {
            contents(cell);
          }
          _results1.push(row.appendChild(cell));
        }
        return _results1;
      })());
    }
    return _results;
  };

  createBox = function(c) {
    var text;
    text = document.createElement("input");
    text.setAttribute("size", "1");
    text.onblur = refreshAnswers;
    text.setAttribute("value", "");
    return c.appendChild(text);
  };

  deducePossibilities = function(fixedValues) {
    var c, finalDeductions, leftcorner, possibilities, r, topcorner, v, value, x, y, _i, _j, _k, _l, _m, _n, _o;
    if (!fixedValues.length === 9) {
      throw new RangeError();
    }
    if (!(fixedValues.every(function(x) {
      return x instanceof Array && x.length === 9;
    }))) {
      throw new RangeError();
    }
    if (!(fixedValues.every(function(a) {
      return a.every(function(value) {
        var _ref;
        return value === null || (_ref = parseInt(value), __indexOf.call([1, 2, 3, 4, 5, 6, 7, 8, 9], _ref) >= 0);
      });
    }))) {
      throw new RangeError();
    }
    possibilities = (function() {
      var _i, _results;
      _results = [];
      for (c = _i = 0; _i < 9; c = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (r = _j = 0; _j < 9; r = ++_j) {
            _results1.push([1, 2, 3, 4, 5, 6, 7, 8, 9]);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (r = _i = 0; _i < 9; r = ++_i) {
      for (c = _j = 0; _j < 9; c = ++_j) {
        value = fixedValues[r][c];
        if (value === null) {
          continue;
        }
        if (__indexOf.call(possibilities[r][c], value) >= 0) {
          possibilities[r][c] = [value];
        }
        for (v = _k = 0; _k < 9; v = ++_k) {
          if (v !== c) {
            removeFromArray(possibilities[r][v], value);
          }
          if (v !== r) {
            removeFromArray(possibilities[v][c], value);
          }
        }
        leftcorner = c - (c % 3);
        topcorner = r - (r % 3);
        for (x = _l = 0; _l < 3; x = ++_l) {
          for (y = _m = 0; _m < 3; y = ++_m) {
            if (!(topcorner + x === r && leftcorner + y === c)) {
              removeFromArray(possibilities[topcorner + x][leftcorner + y], value);
            }
          }
        }
      }
    }
    finalDeductions = (function() {
      var _n, _results;
      _results = [];
      for (c = _n = 0; _n < 9; c = ++_n) {
        _results.push((function() {
          var _o, _results1;
          _results1 = [];
          for (r = _o = 0; _o < 9; r = ++_o) {
            _results1.push(null);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (r = _n = 0; _n < 9; r = ++_n) {
      for (c = _o = 0; _o < 9; c = ++_o) {
        finalDeductions[r][c] = possibilities[r][c].length === 1 ? possibilities[r][c][0] : null;
      }
    }
    return [finalDeductions, possibilities];
  };

  refreshAnswers = function() {
    var answers, c, data, possibilities, prevAnswers, r, results, strval, tries, values, _i, _j, _k, _ref, _ref1, _ref2, _results;
    data = document.getElementById("mainTable");
    results = document.getElementById("resultsTable");
    values = (function() {
      var _i, _results;
      _results = [];
      for (c = _i = 0; _i < 9; c = ++_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (r = _j = 0; _j < 9; r = ++_j) {
            _results1.push(null);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    for (r = _i = 0; _i < 9; r = ++_i) {
      for (c = _j = 0; _j < 9; c = ++_j) {
        strval = data.children[r].children[c].children[0].value;
        values[r][c] = (_ref = parseInt(strval), __indexOf.call([1, 2, 3, 4, 5, 6, 7, 8, 9], _ref) >= 0) ? parseInt(strval) : null;
      }
    }
    _ref1 = deducePossibilities(values), answers = _ref1[0], possibilities = _ref1[1];
    prevAnswers = null;
    tries = 0;
    while (true) {
      prevAnswers = answers;
      _ref2 = deducePossibilities(answers), answers = _ref2[0], possibilities = _ref2[1];
      tries++;
      if (tries > 50 || prevAnswers.every(function(A, I) {
        return A.every(function(n, i) {
          return answers[I][i] === n;
        });
      })) {
        break;
      }
    }
    _results = [];
    for (r = _k = 0; _k < 9; r = ++_k) {
      _results.push((function() {
        var _l, _results1;
        _results1 = [];
        for (c = _l = 0; _l < 9; c = ++_l) {
          results.children[r].children[c].style.background = "#FFFFFF";
          if (possibilities[r][c].length === 1) {
            _results1.push(results.children[r].children[c].innerHTML = "<b>" + String(possibilities[r][c][0]) + "</b>");
          } else {
            _results1.push(results.children[r].children[c].innerHTML = "<small>" + String(possibilities[r][c].length) + "</small>");
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  window.onload = function() {
    var results, table;
    table = document.getElementById("mainTable");
    createTable(table, createBox);
    results = document.getElementById("resultsTable");
    return createTable(results, function(c) {
      return c.innerHTML = 0;
    });
  };

}).call(this);
